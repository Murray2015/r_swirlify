- Class: meta
  Course: R for climate scientists
  Lesson: Plotting basemaps
  Author: Murray Hoggett
  Type: Standard
  Organization: University of Birmingham UK
  Version: 2.4.3

- Class: text
  Output: Welcome to this Swirl course for climate scientists! This course will show you some useful packages and funtions avaliable in R to help with working with files and plotting data.

- Class: text
  Output: In this first course we will explore using the marmap package to make simple base maps for our study area.

- Class: cmd_question
  Output: Let's start by installing the marmap package. If you haven't installed a package before, lots of text will flash by. This a good thing. Note the marmap package is quite large, so installing it can take a few minutes. It's worth it though, marmap is GOOD! Type install.packages("marmap") below and hit enter
  CorrectAnswer: install.packages("marmap")
  AnswerTests: any_of_exprs('install.packages("marmap")', "install.packages('marmap')")
  Hint: Type install.packages("marmap"), and hit enter!

- Class: cmd_question
  Output: Great, now the marmap package is installed. Next we need to load the marmap package into R, ready for us to use it. Type library("marmap") below and hit enter to load the marmap package.
  CorrectAnswer: library("marmap")
  AnswerTests: any_of_exprs('library("marmap")', 'library(marmap)', "library('marmap')")
  Hint: Type library("marmap"), and hit enter!

- Class: text
  Output: Well done, the marmap package is now loaded into R, meaning the functions inside marmap are now ready for us to use them!

- Class: text
  Output: One super useful function marmap has is the getNOAA.bathy() function. This allows us to access the United States National Oceanic and Atmospheric Administration database, and download a grid of seafloor data, without leaving the R console. Cool huh?!

- Class: text
  Output: The getNOAA.bathy() queries the ETOPO1 dataset, which is commonly used in climate science. The function takes 5 main arguments -  lon1, lon2, lat1, la2 and resolution. As you might guess, lon1 and lon2 are the left and right hand extents of the data the function will get for us, and lat1 and lat2 are the bottom and top extents. The resolution parameter is in minutes. Use a lower resolution (i.e. a bigger number of minutes) for slower connections.

- Class: cmd_question
  Output: Let's use the getNOAA.bathy() function to get data for the North Atlantic. Let's get data between longitude -50 and 10, and lattitude 35 and 75, with a resolution of 10 minutes. Store the result in a variable called bathy_data. Like this - bathy_data = getNOAA.bathy(Enter the arguments here)
  CorrectAnswer: bathy_data <- getNOAA.bathy(lon1 = -50, lon2 = 10, lat1 = 35, lat2 = 75, resolution = 10)
  AnswerTests: omnitest(correctExpr='bathy_data <- getNOAA.bathy(lon1 = -50, lon2 = 10, lat1 = 35, lat2 = 75, resolution = 10)')
  Hint: Copy and paste this command and hit enter - bathy_data <- getNOAA.bathy(lon1 = -50, lon2 = 10, lat1 = 35, lat2 = 75, resolution = 10)

- Class: text
  Output: Great, now we have some data! Let's plot it with the plot command.

- Class: cmd_question
  Output: Enter plot(bathy_data, image=TRUE) below
  CorrectAnswer: plot(bathy_data, image=TRUE)
  AnswerTests: omnitest(correctExpr='plot(bathy_data, image=TRUE)')
  Hint: Type plot(bathy_data, image=TRUE), and hit enter!

- Class: cmd_question
  Output: We can add a sampling location as a point using the points() function. Try adding a point at x = 0, y=5, with the arguments col='red' and pch=19.
  CorrectAnswer: points(x=0, y=55, col='red', pch=19)
  AnswerTests: any_of_exprs("points(x=0, y=55, col='red', pch=19)", "points(x = 0, y = 55, col = 'red', pch = 19)", 'points(x=0, y=55, col="red", pch=19)')
  Hint: Copy and paste this - points(x=0, y=55, col='red', pch=19)
